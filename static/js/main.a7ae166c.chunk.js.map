{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","useState","pressedKey","setPressedKey","useEffect","handleKeyPress","e","key","window","addEventListener","removeEventListener","className","App2","state","event","setState","document","this","React","PureComponent","ReactDOM","render","getElementById"],"mappings":"2NAEaA,EAAgB,WAC3B,MAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OAZAC,qBAAU,WACR,IAAMC,EAAiB,SAACC,GACtBH,EAAcG,EAAEC,MAKlB,OAFAC,OAAOC,iBAAiB,UAAWJ,GAE5B,WACLG,OAAOE,oBAAoB,UAAWL,MAEvC,IAGD,qBAAKM,UAAU,MAAf,SACE,mBAAGA,UAAU,eAAb,SACGT,EAAU,oCACsBA,EADtB,MAEP,+BAWCU,EAAb,4MACEC,MAAe,CACbX,WAAY,IAFhB,EAaEG,eAAiB,SAACS,GAChB,EAAKC,SAAS,CAAEb,WAAYY,EAAMP,OAdtC,uDAKE,WACES,SAASP,iBAAiB,QAASQ,KAAKZ,kBAN5C,kCASE,WACEW,SAASN,oBAAoB,QAASO,KAAKZ,kBAV/C,oBAiBE,WACE,IAAQH,EAAee,KAAKJ,MAApBX,WAER,OACE,qBAAKS,UAAU,MAAf,SACE,mBAAGA,UAAU,eAAb,SACGT,EAAU,oCACsBA,EADtB,MAEP,kCAzBd,GAA0BgB,IAAMC,e,MC5BhCC,IAASC,OACP,qCACE,cAAC,EAAD,IACA,cAAC,EAAD,OAGFL,SAASM,eAAe,W","file":"static/js/main.a7ae166c.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nexport const App: React.FC = () => {\n  const [pressedKey, setPressedKey] = useState('');\n\n  useEffect(() => {\n    const handleKeyPress = (e: KeyboardEvent) => {\n      setPressedKey(e.key);\n    };\n\n    window.addEventListener('keydown', handleKeyPress);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyPress);\n    };\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <p className=\"App__message\">\n        {pressedKey\n          ? `The last pressed key is [ ${pressedKey} ]`\n          : 'Nothing was pressed yet'}\n      </p>\n    </div>\n\n  );\n};\n\ntype State = {\n  pressedKey: string;\n};\n\nexport class App2 extends React.PureComponent<{}, State> {\n  state: State = {\n    pressedKey: '',\n  };\n\n  componentDidMount(): void {\n    document.addEventListener('keyup', this.handleKeyPress);\n  }\n\n  componentWillUnmount(): void {\n    document.removeEventListener('keyup', this.handleKeyPress);\n  }\n\n  handleKeyPress = (event: KeyboardEvent) => {\n    this.setState({ pressedKey: event.key });\n  };\n\n  render() {\n    const { pressedKey } = this.state;\n\n    return (\n      <div className=\"App\">\n        <p className=\"App__message\">\n          {pressedKey\n            ? `The last pressed key is [ ${pressedKey} ]`\n            : 'Nothing was pressed yet'}\n        </p>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App, App2 } from './App';\n\nimport './index.scss';\n\nReactDOM.render(\n  <>\n    <App />\n    <App2 />\n  </>,\n\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}